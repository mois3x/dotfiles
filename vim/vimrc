call pathogen#infect()
set nocompatible
syntax on
syntax enable
filetype plugin indent on
set laststatus=2
set shiftwidth=2
set tabstop=2
set expandtab
set colorcolumn=80
set encoding=utf-8
if has('gui_running')
    set background=light
    else
    set background=dark
endif
set encoding=utf-8
set term=xterm-256color
set termencoding=utf-8

let g:solarized_termtrans = 1
colorscheme pencil
""let g:solarized_termcolors=16
call togglebg#map("<F5>")
""let g:airline_theme='kalisi'
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline#extensions#tmuxline#enabled = 0
let g:tmuxline_theme = 'zenburn'
"let g:airline#extensions#tabline#left_sep = ' '
"let g:airline#extensions#tabline#left_alt_sep = '|'
set smartindent
set autoindent
""no swap files
set nobackup
set noswapfile
"" NERDTree toogle F12
nnoremap <F12> :NERDTreeToggle<enter>
"" Remap emmet
imap <C-e> <C-y>,
set t_Co=16
set number

let g:NERDTreeWinPos = "right"
set guifont=Monaco:h12
set guioptions-=T " Removes top toolbar
set guioptions-=r " Removes right hand scroll bar
set go-=L " Removes left hand scroll bar
autocmd User Rails let b:surround_{char2nr('-')} = "<% \r %>" " displays <% %> correctly
"":set cpoptions+=$ " puts a $ marker for the end of words/lines in cw/c$ commands

au VimEnter * IndentGuidesEnable

" In Normal mode, Arrow keys switch windows
nnoremap <up> <C-w><up>
nnoremap <down> <C-w><down>
nnoremap <left> <C-w><left>
nnoremap <right> <C-w><right>
" Disable arrow keys
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>


""Remap normal mode
:imap jj <Esc>
nnoremap <silent> <C-S> :<C-u>Update<CR>
inoremap <M-o> <Esc>o
inoremap <C-j> <Down>
let g:ragtag_global_maps = 1
:set hlsearch


" Switch to alternate file
map <Tab> :bnext<cr>
map <S-Tab> :bprevious<cr>

" With a map leader it's possible to do extra key combinations
" " like <leader>w saves the current file
let mapleader = " "
let g:mapleader = " "

" VIM TSLIME RSPEC
let g:rspec_command = 'call Send_to_Tmux("bundle exec rspec -f d {spec}\n")'
" vim-rspec mappings
map <Leader>t :call RunCurrentSpecFile()<CR>
"map <Leader>s :call RunNearestSpec()<CR>
map <leader>s <Plug>SendFocusedTestToTmux
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>

" Update document
:noremap <F2> :<c-u>update <cr>

" turbux setting
let g:turbux_command_prefix = ' bundle exec' " default is empty
let g:turbux_command_rspec = 'rspec -f d' " default is empty

" Multiple-Cursor Default mapping
" let g:multi_cursor_next_key='<C-z>'

" vim-ruby-refactoring bindings
:nnoremap <leader>rap  :RAddParameter<cr>
:nnoremap <leader>rcpc :RConvertPostConditional<cr>
:nnoremap <leader>rel  :RExtractLet<cr>
:vnoremap <leader>rec  :RExtractConstant<cr>
:vnoremap <leader>relv :RExtractLocalVariable<cr>
:nnoremap <leader>rit  :RInlineTemp<cr>
:vnoremap <leader>rrlv :RRenameLocalVariable<cr>
:vnoremap <leader>rriv :RRenameInstanceVariable<cr>
:vnoremap <leader>rem  :RExtractMethod<cr>

" ctrlp buffer-list
:map <leader>m  :CtrlPBuffer<cr>

"Remap :
:map ; :

"ctrlp ignores
let g:ctrlp_user_command = {
  \ 'types': {
    \ 1: ['.git', 'cd %s && git ls-files --cached --exclude-standard --others'],
    \ 2: ['.hg', 'hg --cwd %s locate -I .'],
    \ },
  \ 'fallback': 'find %s -type f'
  \ }

"vim dragvisuals
vmap  <expr>  <LEFT>   DVB_Drag('left')
vmap  <expr>  <RIGHT>  DVB_Drag('right')
vmap  <expr>  <DOWN>   DVB_Drag('down')
vmap  <expr>  <UP>     DVB_Drag('up')
vmap  <expr>  D        DVB_Duplicate()

"move lines
nnoremap <c-s-j> :m .+1<CR>==
nnoremap <c-s-k> :m .-2<CR>==
inoremap <c-s-j> <Esc>:m .+1<CR>==gi
inoremap <c-s-k> <Esc>:m .-2<CR>==gi
vnoremap <c-s-j> :m '>+1<CR>gv=gv
vnoremap <c-s-k> :m '<-2<CR>gv=gv

"" Vim I18n plugin
vmap <Leader>z :call I18nTranslateString()<CR>)

""functions
function SwitchBuffer()
    b#
endfunction
  
:nnoremap <leader><Tab> :call SwitchBuffer()<CR>)

""Add closing braces at end of the line
function! ConditionalPairMap(open, close)
  let line = getline('.')
  let col = col('.')
  if col < col('$') || stridx(line, a:close, col + 1) != -1
    return a:open
  else
    return a:open . a:close . repeat("\<left>", len(a:close))
  endif
endf
inoremap <expr> ( ConditionalPairMap('(', ')')
inoremap <expr> { ConditionalPairMap('{', '}')
inoremap <expr> [ ConditionalPairMap('[', ']')
